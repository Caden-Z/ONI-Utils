buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "oniutils.refmap.json"
}

version = '1.0'
group = 'wintersteve25.oniutils' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'oniutils'

//java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "snapshot", version: "20201028-1.16.3"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config="+modid+".mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            mods {
                oniutils {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config="+modid+".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                oniutils {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'oniutils', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                oniutils {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://maven.tterrag.com/"
    }

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

    maven { url "https://www.cursemaven.com" }

    maven { url 'https://modmaven.dev/' }

    mavenLocal()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.203")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65")
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65:api")
    implementation fg.deobf("team.chisel.ctm:CTM:MC1.16.1-1.1.2.6")
    compile fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.4-22")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.40')
//    compile fg.deobf ('curse.maven:forgeendertech-244844:3246245')
//    compile fg.deobf ('curse.maven:pollution-of-the-realms-269973:3353998')
//    compile fg.deobf ('curse.maven:adchimneys-244830:3357470')
    compile fg.deobf ('curse.maven:pmmo-353935:3354382')
    compile fg.deobf ('curse.maven:corpse-316582:3338002')
    compile fg.deobf ("mekanism:Mekanism:1.16.5-10.0.21.448:api")
    compile fg.deobf ("mekanism:Mekanism:1.16.5-10.0.21.448")

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "ONIUtils",
                "Specification-Vendor": "oniutilssareus",
                "Specification-Version": "1.0.0", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"oniutilssareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}